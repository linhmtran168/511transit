// Code generated by MockGen. DO NOT EDIT.
// Source: ./api.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransitAPI is a mock of TransitAPI interface.
type MockTransitAPI struct {
	ctrl     *gomock.Controller
	recorder *MockTransitAPIMockRecorder
}

// MockTransitAPIMockRecorder is the mock recorder for MockTransitAPI.
type MockTransitAPIMockRecorder struct {
	mock *MockTransitAPI
}

// NewMockTransitAPI creates a new mock instance.
func NewMockTransitAPI(ctrl *gomock.Controller) *MockTransitAPI {
	mock := &MockTransitAPI{ctrl: ctrl}
	mock.recorder = &MockTransitAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransitAPI) EXPECT() *MockTransitAPIMockRecorder {
	return m.recorder
}

// GetOperators mocks base method.
func (m *MockTransitAPI) GetOperators() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperators")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperators indicates an expected call of GetOperators.
func (mr *MockTransitAPIMockRecorder) GetOperators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperators", reflect.TypeOf((*MockTransitAPI)(nil).GetOperators))
}

// GetTripUpdates mocks base method.
func (m *MockTransitAPI) GetTripUpdates(operatorID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTripUpdates", operatorID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTripUpdates indicates an expected call of GetTripUpdates.
func (mr *MockTransitAPIMockRecorder) GetTripUpdates(operatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTripUpdates", reflect.TypeOf((*MockTransitAPI)(nil).GetTripUpdates), operatorID)
}
