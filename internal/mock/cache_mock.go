// Code generated by MockGen. DO NOT EDIT.
// Source: ./store.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gtfs_realtime "github.com/linhmtran168/511transit/api/protos/gtfs-realtime"
	models "github.com/linhmtran168/511transit/internal/models"
)

// MockOperatorCache is a mock of OperatorCache interface.
type MockOperatorCache struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorCacheMockRecorder
}

// MockOperatorCacheMockRecorder is the mock recorder for MockOperatorCache.
type MockOperatorCacheMockRecorder struct {
	mock *MockOperatorCache
}

// NewMockOperatorCache creates a new mock instance.
func NewMockOperatorCache(ctrl *gomock.Controller) *MockOperatorCache {
	mock := &MockOperatorCache{ctrl: ctrl}
	mock.recorder = &MockOperatorCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorCache) EXPECT() *MockOperatorCacheMockRecorder {
	return m.recorder
}

// GetCache mocks base method.
func (m *MockOperatorCache) GetCache(isExtended bool) ([]*models.Operator, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", isExtended)
	ret0, _ := ret[0].([]*models.Operator)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockOperatorCacheMockRecorder) GetCache(isExtended interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockOperatorCache)(nil).GetCache), isExtended)
}

// Lock mocks base method.
func (m *MockOperatorCache) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockOperatorCacheMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockOperatorCache)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockOperatorCache) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockOperatorCacheMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockOperatorCache)(nil).Unlock))
}

// UpdateCache mocks base method.
func (m *MockOperatorCache) UpdateCache(operator []*models.Operator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCache", operator)
}

// UpdateCache indicates an expected call of UpdateCache.
func (mr *MockOperatorCacheMockRecorder) UpdateCache(operator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCache", reflect.TypeOf((*MockOperatorCache)(nil).UpdateCache), operator)
}

// MockTripUpdateCache is a mock of TripUpdateCache interface.
type MockTripUpdateCache struct {
	ctrl     *gomock.Controller
	recorder *MockTripUpdateCacheMockRecorder
}

// MockTripUpdateCacheMockRecorder is the mock recorder for MockTripUpdateCache.
type MockTripUpdateCacheMockRecorder struct {
	mock *MockTripUpdateCache
}

// NewMockTripUpdateCache creates a new mock instance.
func NewMockTripUpdateCache(ctrl *gomock.Controller) *MockTripUpdateCache {
	mock := &MockTripUpdateCache{ctrl: ctrl}
	mock.recorder = &MockTripUpdateCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTripUpdateCache) EXPECT() *MockTripUpdateCacheMockRecorder {
	return m.recorder
}

// GetCache mocks base method.
func (m *MockTripUpdateCache) GetCache(operatorID string, isExtended bool) ([]*gtfs_realtime.FeedEntity, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", operatorID, isExtended)
	ret0, _ := ret[0].([]*gtfs_realtime.FeedEntity)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockTripUpdateCacheMockRecorder) GetCache(operatorID, isExtended interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockTripUpdateCache)(nil).GetCache), operatorID, isExtended)
}

// UpdateCache mocks base method.
func (m *MockTripUpdateCache) UpdateCache(operatorID string, trips []*gtfs_realtime.FeedEntity) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCache", operatorID, trips)
}

// UpdateCache indicates an expected call of UpdateCache.
func (mr *MockTripUpdateCacheMockRecorder) UpdateCache(operatorID, trips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCache", reflect.TypeOf((*MockTripUpdateCache)(nil).UpdateCache), operatorID, trips)
}
